#!/bin/bash
### BEGIN INIT INFO
# Provides:          carbon-cache
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start carbon-cache at boot time
# Description:       Aggregates Graphite metrics.
### END INIT INFO


export PYTHONPATH="$GRAPHITE_DIR/lib:$PYTHONPATH"

# Source function library.
if [ -e /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions;
fi;


CARBON_DAEMON="cache"
GRAPHITE_DIR="/opt/graphite"
INSTANCES=`grep "^\[${CARBON_DAEMON}" ${GRAPHITE_DIR}/conf/carbon.conf | cut -d \[ -f 2 | cut -d \] -f 1 | cut -d : -f 2`

function die {
  echo $1
  exit 1
}

start(){
    cd $GRAPHITE_DIR;

    for INSTANCE in ${INSTANCES}; do
        if [ "${INSTANCE}" == "${CARBON_DAEMON}" ]; then
            INSTANCE="a";
        fi;
        echo "Starting carbon-${CARBON_DAEMON}:${INSTANCE}..."
        bin/carbon-${CARBON_DAEMON}.py --instance=${INSTANCE} start;
        
        log_end_msg $?
    done;
}

stop(){
    cd $GRAPHITE_DIR

    for INSTANCE in ${INSTANCES}; do
        if [ "${INSTANCE}" == "${CARBON_DAEMON}" ]; then
            INSTANCE="a";
        fi;
        echo "Stopping carbon-${CARBON_DAEMON}:${INSTANCE}..."
        bin/carbon-${CARBON_DAEMON}.py --instance=${INSTANCE} stop

        if [ `sleep 3; /usr/bin/pgrep -f "carbon-${CARBON_DAEMON}.py --instance=${INSTANCE}" | /usr/bin/wc -l` -gt 0 ]; then
            echo "Carbon did not stop yet. Sleeping longer, then force killing it...";
            sleep 20;
            if [ `/usr/bin/pgrep -f "carbon-${CARBON_DAEMON}.py --instance=${INSTANCE}" | /usr/bin/wc -l` -gt 0 ]; then
                /usr/bin/pkill -9 -f "carbon-${CARBON_DAEMON}.py --instance=${INSTANCE}";
            fi;
        fi;

        log_end_msg $?
    done;
}

status(){
    cd $GRAPHITE_DIR;

    for INSTANCE in ${INSTANCES}; do
        if [ "${INSTANCE}" == "${CARBON_DAEMON}" ]; then
            INSTANCE="a";
        fi;
        bin/carbon-${CARBON_DAEMON}.py --instance=${INSTANCE} status;
    
        log_end_msg $?
    done;
}

case "$1" in
  start)
    start 
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  restart|reload)
    stop
    start
    ;;
  *)
    echo $"Usage: $0 {start|stop|restart|status}"
    exit 1
esac

